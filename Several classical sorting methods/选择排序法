/*
选择排序的时间复杂度为O（n^2）,空间复杂度为O（1）。选择排序存在一个明显问题是不稳定性，当数列包含多个相等的元素时，选择排序有可能会打乱他们的顺序。

第一种方法是将一组数组内所有的值进行比较选出最大值，关键的是要得到该最大值的数组下标，将其放置数组末尾。
*/
#include <iostream>
using namespace std;

int findMaxPos(int arr[],int n)
{
    int max = arr[0];
    int pos = 0;
    for(int i=0; i<n; i++)
    {
        if(arr[i] > max)
        {
            max=arr[i];
            pos = i;
        }
    }
    return pos;
}

void selectionSort(int arr[],int n)
{
    while(n>1)
    {
        int pos = findMaxPos(arr,n);
        int temp = arr[pos];
        arr[pos] = arr[n-1];
        arr[n-1] = temp;
        n--;
    }
}

int main()
{
    int arr[]={3,2,5,1,4,6,9,7,8};
    selectionSort(arr,9);
    int i;
    for(i=0; i<9; i++)
    {
        cout<<arr[i]<<endl;
    }

    return 0;
}



/*
  第二种方法是将一组数组内所有的值进行比较选出最小值，关键的是要得到该最小值的数组下标，将其放置数组开头。
*/
#include <iostream> 
using namespace std;

void selectionsort(int arr[],int size)
{
	for(int i=0; i<size-1; i++) //注意这里 i 的循环次数
	{	
		int min_index = i;
		for(int j = i+1; j<size; j++) //注意这里 j 的循环次数
		{
			min_index = arr[min_index] < arr[j] ? min_index : j;
		}
		int tmp;
		tmp = arr[i];
		arr[i] = arr[min_index];
		arr[min_index] = tmp;
	}
} 

int main()
{
	int arr[] = {2,3,1,4,6,5};
	int size = sizeof(arr) / sizeof(int);
	
	selectionsort(arr,size);	
	
	for(int i=0; i<size; i++)
	{
		cout<<arr[i]<<endl;
	}

	return 0;
}
